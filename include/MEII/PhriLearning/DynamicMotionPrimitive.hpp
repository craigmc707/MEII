// MIT License
//
// MEII - MAHI Exo-II Extension of MEL, the MAHI Exoskeleton Library
// Copyright (c) 2018 Mechatronics and Haptic Interfaces Lab - Rice University
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// Author(s): Craig McDonald (craig.g.mcdonald@gmail.com)

#ifndef MEII_DYNAMIC_MOTION_PRIMITIVE_HPP
#define MEII_DYNAMIC_MOTION_PRIMITIVE_HPP

#include <MEII/Utility/Matrix.hpp>
#include <vector>
#include <MEL/Math/Integrator.hpp>
#include <MEL/Core/Time.hpp>
#include <MEII/Control/Trajectory.hpp>
#include <MEII/Control/WayPoint.hpp>

namespace meii {

    class DynamicMotionPrimitive {

    public:

        /// Constructor
		DynamicMotionPrimitive(const mel::Time &sample_period, const WayPoint &start, const WayPoint &goal, Matrix(*nonlin_function)(const Matrix&, const Matrix&), const std::vector<double> &theta, Matrix K = Matrix() , Matrix D = Matrix(), double gamma = 25.0 / 3.0);

		/// Returns the trajectory generated by the DMP
        const Trajectory& trajectory();

		/// Updates the trajectory of the DMP based on the new value of theta
		const Trajectory& update(const std::vector<double> &theta);

		/// Clears the DMP memory
        void clear();

		/// Sets the start point and regenerates the trajectory. Returns true if successful.
		bool set_start(const WayPoint &start);

		/// Sets the goal point and regenerates the trajectory. Returns true if successful.
		bool set_goal(const WayPoint &goal);

    private:

		/// Checks that input parameters start, goal, K, and D all have dimensions that are consistent
        bool check_param_dim();

		/// Sets the parameter tau based on given waypoints and generates a vector of waypoint times for the trajectory
		void set_timing_parameters();

		/// Generate trajectory from given parameters
		void generate_trajectory();

		/// Forward integration step of the trajectory
        void step();

    private:

        mel::Time Ts_; ///< sample period
        WayPoint q_0_; ///< starting point
		WayPoint g_; ///< goal point
        Matrix K_; ///< stiffness matrix
        Matrix D_; ///< damping matrix
		Matrix(*nonlin_function_)(const Matrix&, const Matrix&); ///< nonlinear vector field for shaping trajectory
		double gamma_; ///< rate parameter for decay of nonlinear vector field
        double tau_; ///< temporal scaling factor ensuring arrival at the goal
        double s_; ///< phase variable that monotonically decreases from one to zero
		
        std::size_t path_dim_; ///< dimensionality of the trajectory
        std::size_t path_size_; ///< number of waypoints in the trajectory
        std::vector<double> times_; ///< vector of times associated with trajectory waypoints
		std::size_t current_time_idx_; ///< index for tracking generation of trajectory
		std::vector<mel::Integrator> integrator_; ///< vector of integrators for integrating state equations
        
        Matrix q_0_mat_; ///< matrix for storing starting point position
		Matrix g_mat_; ///< matrix for storing goal point position
        Matrix q_mat_; ///< matrix for storing current states
        Matrix q_dot_mat_; ///< matrix for storing current first time derivative of states
		Matrix q_ddot_mat_; ///< matrix for storing current second time derivative of states
		Matrix theta_mat_; ///< matrix for storing current feature weighting vector

        Trajectory trajectory_; ///< trajectory generated upon construction or update of feature weighting vector theta

    };

} // namespace meii


#endif // MEII_DYNAMIC_MOTION_PRIMITIVE_HPP
