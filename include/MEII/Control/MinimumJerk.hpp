// MIT License
//
// MEII - MAHI Exo-II Extension of MEL, the MAHI Exoskeleton Library
// Copyright (c) 2018 Mechatronics and Haptic Interfaces Lab - Rice University
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// Author(s): Craig McDonald (craig.g.mcdonald@gmail.com)

#ifndef MEII_MINIMUM_JERK_HPP
#define MEII_MINIMUM_JERK_HPP

#include <MEII/Utility/Matrix.hpp>
#include <vector>
#include <MEL/Math/Integrator.hpp>
#include <MEL/Core/Time.hpp>
#include <MEII/Control/Trajectory.hpp>
#include <MEII/Control/WayPoint.hpp>

namespace meii {

	class MinimumJerk {

	public:

		/// Constructor without nonlinear function
		MinimumJerk(const mel::Time &sample_period, const WayPoint &start, const WayPoint &goal);

		/// Returns the trajectory generated by the DMP
		const Trajectory& trajectory();

		/// Updates the trajectory of the DMP based on the new value of theta
		const Trajectory& update();

		/// Clears the DMP memory
		void clear();

		/// Sets the start point and regenerates the trajectory. Returns true if successful.
		bool set_start(const WayPoint &start);

		/// Sets the goal point and regenerates the trajectory. Returns true if successful.
		bool set_goal(const WayPoint &goal);

		/// Sets the start point and goal point and regenerates the trajectory. Returns true if successful.
		bool set_endpoints(const WayPoint &start, const WayPoint &goal);

		/// Sets the interp_method and max_diff properties of the trajectory.
		void set_trajectory_params(Trajectory::Interp interp_method = Trajectory::Interp::Linear, const std::vector<double> &max_diff = { mel::INF });

		/// Returns the value of the parameter tau
		double get_tau() const;

	private:

		/// Checks that input parameters start, goal, K, and D all have dimensions that are consistent
		bool check_param_dim();

		/// Sets the parameter tau based on given waypoints and generates a vector of waypoint times for the trajectory
		void set_timing_parameters();

		/// Generate trajectory from given parameters
		void generate_trajectory();


	private:

		bool has_field_; ///< true when there is a nonlinear vector field for shaping the attractor landscape

		mel::Time Ts_; ///< sample period
		double T_; ///< total movement time
		WayPoint q_0_; ///< starting point
		WayPoint g_; ///< goal point

		double tau_; ///< temporal scaling factor ensuring arrival at the goal

		std::size_t path_dim_; ///< dimensionality of the trajectory
		std::size_t path_size_; ///< number of waypoints in the trajectory
		std::vector<double> times_; ///< vector of times associated with trajectory waypoints
		std::size_t current_time_idx_; ///< index for tracking generation of trajectory

		Trajectory trajectory_; ///< trajectory generated upon construction or update of feature weighting vector theta

	};

} // namespace meii


#endif // MEII_DYNAMIC_MOTION_PRIMITIVE_HPP
