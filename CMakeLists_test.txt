cmake_minimum_required(VERSION 3.7.0)

#===============================================================================
# USER OPTIONS
#===============================================================================
option(NI_X64      "Turn ON if compiling for NI Intel x64 embeded hardware"                    OFF)
option(MOVE_BINS   "Turn ON to move binariest to conventional bin/lib folders at compilation"  ON)

option(QUANSER     "Turn ON if compiling for Quanser hardware"                                 ON)
option(OSIM        "Turn ON to build OpenSim related executable(s)."                           OFF)
option(PHRI_LEARN  "Turn ON to build Phyical Human-Robot Interaction Learning executable(s)."  OFF)
option(EMG_RT_CTRL "Turn ON to build EMG Real-Time Control executable(s)."                     OFF)
option(MYO         "Turn ON to build Thalmic Labs Myo Armband."                                OFF)
option(EXAMPLES    "Turn ON to build example executable(s)."                                   OFF)
option(TESTS       "Turn ON to build test executable(s)"                                       OFF)

set(NI_X64_ROOT  "C:/dev/nirlt-linux-x64"       CACHE FILEPATH "Absolute path to NI Linux Realtime GNU toolchain (x64).")
set(QUANSER_ROOT "C:/Program Files/Quanser"     CACHE FILEPATH "Absolute path to Quanser installation.")
set(EIGEN_ROOT   "C:/dev/eigen"                 CACHE FILEPATH "Absolute path to Eigen installation.")
set(MYO_ROOT     "C:/dev/myo-sdk-win-0.9.0"     CACHE FILEPATH "Absolute path to Myo SDK.")

if (NI_X64)
    # add compiler to path
    LIST(APPEND CMAKE_PROGRAM_PATH ${NI_X64_ROOT}/sysroots/i686-nilrtsdk-mingw32/usr/bin/x86_64-nilrt-linux)
    # set compiler (must be called before project/enable)
    set(CMAKE_C_COMPILER x86_64-nilrt-linux-gcc)
    set(CMAKE_CXX_COMPILER x86_64-nilrt-linux-g++)
    # set to cross compile
    set(CMAKE_SYSTEM_NAME Generic)
    set(CMAKE_CROSSCOMPILING 1)
    # setup sysroot (for NI RT cross compiler)
    set(CMAKE_SYSROOT ${NI_X64_ROOT}/sysroots/core2-64-nilrt-linux)
endif()

# create project
project(MEII VERSION 0.1.0 LANGUAGES CXX)

find_package(MEL REQUIRED)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

# set compiler flags
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -Wall -O3 -ldl") # all warnings
elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} /W4") # warning level 4
    set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} /MP") # multicore build
endif()

#===============================================================================
# INCLUDES
#===============================================================================

# MEL Lib and Eigen Lib
set(INCLUDE_DIRS "include" ${EIGEN_ROOT})#{MEL_ROOT}/include ${EIGEN_ROOT})

if (MYO)
    list(APPEND INCLUDE_DIRS ${MYO_ROOT}/include)
endif()

if (MYO)
    link_directories("${MYO_ROOT}/lib")
    if (CMAKE_SIZEOF_VOID_P EQUAL 8) # 64-bit
        list(APPEND LINK_LIBS myo64)
    else() # 32-bit
        list(APPEND LINK_LIBS myo32)
    endif()
endif()

if (NI_X64)
    # compiler flags
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
    # hardware includes
    list(APPEND INCLUDE_DIRS
        "${NI_X64_ROOT}/sysroots/core2-64-nilrt-linux/usr/include/c++/4.9.2"
        "${NI_X64_ROOT}/sysroots/core2-64-nilrt-linux/usr/include/c++/4.9.2/x86_64-nilrt-linux")
    # hardware libs
    list(APPEND LINK_LIBS dl rt)
    SET_PROPERTY(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE)
endif()

# include directories
include_directories(${INCLUDE_DIRS})

#===============================================================================
# FIND PROJECT SOURCE FILES
#===============================================================================

set(MAHI_EXO_II_SRC
    /src/MEII/MahiExoII/*.cpp
    /include/MEII/MahiExoII/*.hpp
)

set(CONTROL_SRC
    /src/MEII/Control/*.cpp
    /include/MEII/Control/*.hpp
)

set(EMG_SRC
    /src/MEII/EMG/*.cpp
    /include/MEII/EMG/*.hpp
)

set(SIGNAL_PROCESSING_SRC
    /src/MEII/SignalProcessing/*.cpp
    /include/MEII/SignalProcessing/*.hpp
)

set(CLASSIFICATION_SRC
    /src/MEII/Classification/*.cpp
    /include/MEII/Classification/*.hpp
)

set(REGRESSION_SRC
    /src/MEII/Regression/*.cpp
    /include/MEII/Regression/*.hpp
)

set(UNITY_SRC
    /src/MEII/Unity/*.cpp
    /include/MEII/Unity/*.hpp
)

set(EMG_REAL_TIME_CONTROL_SRC
    /src/MEII/EmgRealTimeControl/*.cpp
    /include/MEII/EmgRealTimeControl/*.hpp
)

set(PHRI_LEARNING_SRC
    /src/MEII/PhriLearning/*.cpp
    /include/MEII/PhriLearning/*.hpp
)

set(OSIM_SRC
    /src/MEII/OpenSim/*.cpp
    /include/MEII/OpenSim/*.hpp
)

if (EMG_RT_CTRL)
    list(APPEND MEII_SOURCE_FILES ${SRC_EMG_REAL_TIME_CONTROL})
endif()

if (PHRI_LEARN)
    list(APPEND MEII_SOURCE_FILES ${SRC_PHRI_LEARNING})
endif()

if (OSIM)
    list(APPEND MEII_SOURCE_FILES ${SRC_OSIM})
endif()

target_link_libraries(MEII MEL::quanser)

#===============================================================================
# CREATE EXECUTABLES
#===============================================================================

if (OSIM)   
    add_executable(osim_data_collection src/osim_data_collection.cpp)
    target_link_libraries(osim_data_collection MEII)

    add_executable(osim_emg_data_collection src/osim_emg_data_collection.cpp)
    target_link_libraries(osim_emg_data_collection MEII)
endif()

if(EMG_RT_CTRL)
    add_executable(emg_real_time_control src/emg_real_time_control.cpp)
    target_link_libraries(emg_real_time_control MEII)
endif()

if(PHRI_LEARN)
    add_executable(phri_learning src/phri_learning.cpp)
    target_link_libraries(phri_learning MEII)

    add_executable(delsys_direct_control src/delsys_direct_control.cpp)
    target_link_libraries(delsys_direct_control MEII)

    if (MYO)
        add_executable(myo_direct_control src/myo_direct_control.cpp)
        target_link_libraries(myo_direct_control MEII)
    endif()
endif()

if (MYO)
    add_executable(myo_armband_ml src/myo_armband_ml.cpp)
    target_link_libraries(myo_armband_ml MEII)

    add_executable(Jeb_emg src/Jeb_emg.cpp)
    target_link_libraries(Jeb_emg MEII)
endif()

if(EXAMPLES)
    add_subdirectory(examples)
endif()

if(TESTS)
    add_executable(testing tests/testing.cpp)
    target_link_libraries(testing MEII)
endif()
