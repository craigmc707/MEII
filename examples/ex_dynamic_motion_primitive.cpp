#include <MEII/PhriLearning/DynamicMotionPrimitive.hpp>
#include <MEII/PhriLearning/PhriFeatures.hpp>
#include <MEII/Control/Trajectory.hpp>
#include <MEII/MahiExoII/MahiExoII.hpp>
#include <MEII/Utility/Matrix.hpp>
#include <MEL/Logging/Log.hpp>
#include <MEL/Logging/DataLogger.hpp>

using namespace mel;
using namespace meii;

int main() {

    // initialize default logger
    init_logger();

	// construct a Dynamic Motion Primitive (DMP) that could be used by the MAHI Exo-II
    mel::Time Ts = milliseconds(1);
    std::size_t dim = MahiExoII::N_aj_;
    WayPoint start(Time::Zero, std::vector<double>(dim, 0.0));
    WayPoint goal(seconds(5), { -1.2, 0.75, 0.17, -0.17, 0.1 });   
    std::vector<double> theta = { 0.0 };
    DynamicMotionPrimitive dmp(Ts, start, goal, &feature_gradient, theta);
	Trajectory traj = dmp.trajectory();

	// save the trajectory generated by the DMP
	DataLogger dmp_log(WriterType::Buffered, false);
	dmp_log.set_header({"Time (s)", "q_0", "q_1", "q_2", "q_3" ,"q_4"});
	for (std::size_t i = 0; i < traj.size(); ++i) {
		dmp_log.buffer(traj[i].get_point());
	}
	dmp_log.save_data("ex_dmp_log_0.csv", ".", false);
	dmp_log.wait_for_save();
	dmp_log.clear_data();

	// update DMP with new theta value
	theta[0] = 1.0;
	traj = dmp.update(theta);
	for (std::size_t i = 0; i < traj.size(); ++i) {
		dmp_log.buffer(traj[i].get_point());
	}
	dmp_log.save_data("ex_dmp_log_1.csv", ".", false);
	dmp_log.wait_for_save();
	dmp_log.clear_data();


    return 0;
}