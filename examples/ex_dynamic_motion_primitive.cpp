#include <MEII/Control/DynamicMotionPrimitive.hpp>
#include <MEII/Control/Trajectory.hpp>
#include <Mahi/Util.hpp>


using namespace mahi::util;
using namespace meii;

int main() {

	// construct a clock for measuring computation times
	Clock clock;

	// construct a Dynamic Motion Primitive (DMP) that could be used by the MAHI Exo-II
	Time dmp_Ts = milliseconds(50);
	WayPoint start(Time::Zero, { -1.2, 0.75, 0.17, -0.17, 0.1 });
	WayPoint goal(seconds(5), { 1.2, -0.75, -0.17, 0.17, -0.1 });
	clock.restart();
	DynamicMotionPrimitive dmp(dmp_Ts, start, goal);
	Time comp_time = clock.get_elapsed_time();
	std::cout << "DMP construction time was " << comp_time << std::endl;

	// save the trajectory generated by the DMP
	std::vector<std::vector<double>> dmp_log;
	std::string filepath = "ex_dmp_log.csv";

	std::vector<std::string> header = {"Time (s)", "q_0", "q_1", "q_2", "q_3" ,"q_4"};

	csv_write_row(filepath, header);
	for (std::size_t i = 0; i < dmp.trajectory().size(); ++i) {
		dmp_log.push_back(dmp.trajectory()[i].get_point());
	}
	csv_append_rows(filepath, dmp_log);

    return 0;
}